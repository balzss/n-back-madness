{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleCancelBtn","handleStopRound","handleStartTouchStart","e","target","classList","add","handleLetterMatchBtn","setState","letterMatch","state","handlePositionMatchBtn","positionMatch","handleItemTouchStart","handleIncreaseNBack","remove","nBack","Math","min","floor","testLength","handleDecreaseNBack","max","handleItemTouchEnd","handleMenuClick","screen","handleStartRound","questionNo","series","getRandomQuestion","answers","scores","progressInterval","setInterval","handleRoundChange","singleQuestionTime","progress","Line","duration","color","animate","set","newScore","calculateScore","newScores","concat","newSeries","newAnswers","letter","pos","clearInterval","match","offset","length","leaveOutNum","random","String","fromCharCode","this","getRandomInt","showLastLetter","showLastPos","lastLetter","slice","lastPos","prevState","currState","className","Array","map","cell","index","shouldShow","letterClasses","key","decreaseClasses","increaseClasses","round","onTouchStart","onTouchEnd","letterMatchClasses","getMatchBtnClasses","positionMatchClasses","onClick","renderBoard","posScores","reduce","acc","curr","letterScores","combinedScores","renderTestScreen","renderStatsScreen","renderStartScreen","renderScreen","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3523e637.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from 'progressbar.js';\n\nimport './App.scss';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            screen: 'start',\n            series: [{letter: '#', pos: 4}],\n            answers: [],\n            scores: [],\n            progressInterval: null,\n            questionNo: 1,\n            positionMatch: false,\n            letterMatch: false,\n            nBack: 1\n        };\n\n        this.testLength = 21;\n        this.singleQuestionTime = 3000;\n    }\n\n    getMatchBtnClasses(questionNo, nBack, match) {\n        const initialRounds = questionNo <= nBack;\n        return 'matchBtn' + (initialRounds ? ' disabled' : (match ? ' active' : ''));\n    }\n\n    getRandomInt(offset, length, leaveOutNum = false) {\n        return offset + Math.floor(\n            leaveOutNum\n                ? (leaveOutNum + 1 + (Math.random() * (length - 1))) % length\n                : Math.floor(Math.random() * length)\n        );\n    }\n\n    getRandomQuestion(series, nBack, questionNo) {\n        const initQuestion = questionNo < nBack;\n        let letter, pos;\n\n        if (initQuestion) {\n            letter = String.fromCharCode(this.getRandomInt(65, 25));\n            pos = this.getRandomInt(0, 9);\n        } else {\n            const showLastLetter = (Math.random() * 100) < 29.3;\n            const showLastPos = (Math.random() * 100) < 29.3;\n            const lastLetter = showLastLetter && series.slice(-nBack)[0].letter;\n            const lastPos = showLastPos && series.slice(-nBack)[0].pos;\n            letter = lastLetter ? lastLetter : String.fromCharCode(this.getRandomInt(65, 25, lastLetter));\n            pos = lastPos ? lastPos : this.getRandomInt(0, 9, lastPos);\n        }\n\n        return {letter, pos};\n    }\n\n    calculateScore(series, positionMatch, letterMatch) {\n        const prevState = series.slice(-1 - this.state.nBack)[0];\n        const currState = series.slice(-1)[0];\n        const posSame = prevState.pos === currState.pos;\n        const posScore = positionMatch === posSame;\n        const letterSame = prevState.letter === currState.letter;\n        const letterScore = letterMatch === letterSame;\n        return {pos: posScore, letter: letterScore};\n    }\n\n    handleCancelBtn = () => {\n        this.handleStopRound();\n    }\n\n    handleStartTouchStart = e => {\n        e.target.classList.add('active');\n    }\n\n    handleLetterMatchBtn = e => {\n        this.setState({letterMatch: !this.state.letterMatch});\n    }\n\n    handlePositionMatchBtn = e => {\n        this.setState({positionMatch: !this.state.positionMatch});\n    }\n\n    handleItemTouchStart = e => {\n        e.target.classList.add('active');\n    }\n\n    handleIncreaseNBack = e => {\n        e.target.classList.remove('active');\n        this.setState({nBack: Math.min(Math.floor(this.testLength / 2), this.state.nBack + 1)});\n    }\n\n    handleDecreaseNBack = e => {\n        e.target.classList.remove('active');\n        this.setState({nBack: Math.max(1, this.state.nBack - 1)});\n    }\n\n    handleItemTouchStart = e => {\n        e.target.classList.add('active');\n    }\n\n    handleItemTouchEnd = e => {\n        e.target.classList.remove('active');\n    }\n\n    handleMenuClick = e => {\n        this.setState({screen: 'start'});\n    }\n\n    handleStartRound = e => {\n        e.target.classList.remove('active');\n        const progressIntervalFn = () => {\n            this.handleRoundChange();\n        };\n\n        this.setState({screen: 'test', questionNo: 1, series: [this.getRandomQuestion([], this.state.nBack, 0)], answers: [], scores: [], progressInterval: setInterval(progressIntervalFn, this.singleQuestionTime)}, () => {\n            this.progress = new Line('.progressBar', {\n                duration: this.singleQuestionTime,\n                color: '#2545a8'\n            });\n            this.progress.animate(1);\n        });\n    }\n\n    handleRoundChange = () => {\n        if (this.state.questionNo >= this.testLength) {\n            this.handleStopRound();\n            return;\n        }\n\n        this.progress.set(0);\n        this.progress.animate(1);\n\n        const newScore = this.state.questionNo <= this.state.nBack\n            ? {}\n            : this.calculateScore(this.state.series, this.state.positionMatch, this.state.letterMatch);\n        const newScores = this.state.scores.concat(newScore);\n\n        const newSeries = this.state.series.concat(this.getRandomQuestion(this.state.series, this.state.nBack, this.state.questionNo));\n        const newAnswers = this.state.answers.concat({letter: this.state.letterMatch, pos: this.state.positionMatch});\n\n        this.setState({series: newSeries, questionNo: this.state.questionNo + 1, positionMatch: false, letterMatch: false, answers: newAnswers, scores: newScores});\n    }\n\n    handleStopRound = () => {\n        const newScore = this.calculateScore(this.state.series, this.state.positionMatch, this.state.letterMatch);\n\n        const newScores = this.state.scores.concat(newScore);\n\n        clearInterval(this.state.progressInterval);\n        this.setState({screen: 'stats', progressInterval: null, scores: newScores});\n    }\n\n    renderBoard() {\n        return(\n            <div className=\"board\">\n                { \n                    [...Array(9)].map((cell, index) => {\n                        const shouldShow = index === this.state.series.slice(-1)[0].pos; \n                        const letterClasses = 'displayLetter' + (shouldShow ? ' show' : '');\n                        return (\n                            <div className={'cell' + (shouldShow ? ' active' : '')} key={index}>\n                                <span className={letterClasses}>\n                                    { this.state.series.slice(-1)[0].letter }\n                                </span>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n\n    renderStartScreen() {\n        const decreaseClasses = 'menuItem' + (this.state.nBack === 1 ? ' disabled' : '');\n        const increaseClasses = 'menuItem' + (this.state.nBack >= Math.round(this.testLength / 2) ? ' disabled' : '');\n        return (\n            <div className=\"homeScreen\">\n                <div className=\"header\">\n                    <h1>Dual N-Back</h1>\n                </div>\n                <div className=\"menuItems\">\n                    <div className=\"menuItem\">How to play</div>\n                    <div className=\"menuItem\">Options</div>\n                    <div className=\"menuItem\">Statistics</div>\n                    <div className=\"modeSelector\">\n                        <div className={decreaseClasses} onTouchStart={this.handleItemTouchStart} onTouchEnd={this.handleDecreaseNBack}><i className=\"fas fa-caret-left\"></i></div>\n                        <div className=\"menuItem\">{ this.state.nBack } Back</div>\n                        <div className={increaseClasses} onTouchStart={this.handleItemTouchStart} onTouchEnd={this.handleIncreaseNBack}><i className=\"fas fa-caret-right\"></i></div>\n                    </div>\n                    <div className=\"startBtn\" onTouchStart={this.handleStartTouchStart} onTouchEnd={this.handleStartRound}>Start</div>\n                </div>\n            </div>\n        );\n    }\n\n    renderTestScreen() {\n        const letterMatchClasses = this.getMatchBtnClasses(this.state.questionNo, this.state.nBack, this.state.letterMatch);\n        const positionMatchClasses = this.getMatchBtnClasses(this.state.questionNo, this.state.nBack, this.state.positionMatch);\n        return (\n            <div className=\"gameScreen\">\n                <div className=\"gameHeader\">\n                    <div className=\"title\">Dual {this.state.nBack} Back</div>\n                    <button className=\"cancelBtn\" onClick={this.handleCancelBtn}>Cancel</button>\n                </div>\n                <div className=\"boardContainer\">\n                    { this.renderBoard() }\n                </div>\n                <div className=\"progressBarHolder\">\n                    <div className=\"progressBar\"></div>\n                </div>\n                <div className=\"btnRow\">\n                    <div className={letterMatchClasses} onTouchStart={this.handleLetterMatchBtn}>Letter match</div>\n                    <div className={positionMatchClasses} onTouchStart={this.handlePositionMatchBtn}>Position match</div>\n                </div>\n                <div className=\"pager\"> <span className=\"number\">{this.state.questionNo}</span> <span className=\"separator\">/</span> <span className=\"number\">{this.testLength}</span> </div>\n            </div>\n        );\n    }\n\n    renderStatsScreen() {\n        const posScores = this.state.scores.slice(1, -1).reduce((acc, curr) => curr.pos ? acc + 1 : acc, 0);\n        const letterScores = this.state.scores.slice(1, -1).reduce((acc, curr) => curr.letter ? acc + 1 : acc, 0);\n        const combinedScores = this.state.scores.slice(1, -1).reduce((acc, curr) => curr.letter && curr.pos ? acc + 1 : acc, 0);\n        return (\n            <div className=\"statsScreen\">\n                <h2>Game info:</h2>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>N-Back</th>\n                            <td>{this.state.nBack}</td>\n                        </tr>\n                        <tr>\n                            <th>Rounds completed</th>\n                            <td>{this.state.questionNo - 1}</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <h2>Success rates:</h2>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>Position matched</th>\n                            <td>{Math.round((posScores / (this.state.questionNo - 2)) * 100)}%</td>\n                        </tr>\n                        <tr>\n                            <th>Letter matched</th>\n                            <td>{Math.round((letterScores / (this.state.questionNo - 2)) * 100)}%</td>\n                        </tr>\n                        <tr>\n                            <th>Both matched</th>\n                            <td>{Math.round((combinedScores / (this.state.questionNo - 2)) * 100)}%</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div className=\"backHomeBtn\" onClick={this.handleMenuClick}>Main menu</div>\n                <div className=\"retryBtn\" onClick={this.handleStartRound}>Retry</div>\n            </div>\n        );\n    }\n\n    renderScreen() {\n        if (this.state.screen === 'test') {\n            return this.renderTestScreen();\n        } else if (this.state.screen === 'stats') {\n            return this.renderStatsScreen();\n        }\n        return this.renderStartScreen();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                { this.renderScreen() }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}