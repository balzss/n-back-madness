{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleCancelBtn","handleStopRound","handleStartBtn","progressIntervalFn","state","progress","setState","handleRoundChange","startLetter","String","fromCharCode","Math","floor","random","startPos","screen","questionNo","series","letter","pos","answers","setTimeout","progressInterval","setInterval","handleLetterMatchBtn","e","preventDefault","letterMatch","handlePositionMatchBtn","positionMatch","testLength","newLetter","newPos","newSeries","concat","newAnswers","clearInterval","className","Array","map","cell","index","shouldShow","slice","letterClasses","letterStyle","opacity","key","style","onClick","this","letterMatchClasses","positionMatchClasses","renderBoard","onTouchStart","width","JSON","stringify","renderTestScreen","renderStatsScreen","renderStartScreen","renderScreen","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56026504.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            screen: 'start',\n            series: [],\n            answers: [],\n            progressInterval: null,\n            progress: 0,\n            questionNo: 1,\n            positionMatch: false,\n            letterMatch: false\n        };\n\n        this.testLength = 6;\n    }\n\n    handleCancelBtn = () => {\n        this.handleStopRound();\n    }\n\n    handleStartBtn = () => {\n        const progressIntervalFn = () => {\n            if (this.state.progress >= 0.9) {\n                this.setState({progress: 0});\n                this.handleRoundChange();\n            } else {\n                this.setState({progress: this.state.progress + 0.1});\n            }\n        };\n\n        const startLetter = String.fromCharCode(65 + Math.floor(Math.random() * 25));\n        const startPos = Math.floor(Math.random() * 9);\n\n        this.setState({screen: 'test', questionNo: 1, series: [{letter: startLetter, pos: startPos}], answers: []}, () => {\n            setTimeout(() => {\n                this.setState({progressInterval: setInterval(progressIntervalFn, 300)});\n            }, 50);\n        });\n    }\n\n    handleLetterMatchBtn = e => {\n        e.preventDefault();\n        this.setState({letterMatch: !this.state.letterMatch});\n    }\n\n    handlePositionMatchBtn = e => {\n        e.preventDefault();\n        this.setState({positionMatch: !this.state.positionMatch});\n    }\n\n    handleRoundChange = () => {\n        if (this.state.questionNo >= this.testLength) {\n            this.handleStopRound();\n            return;\n        }\n        const newLetter = String.fromCharCode(65 + Math.floor(Math.random() * 25));\n        const newPos = Math.floor(Math.random() * 9);\n\n        const newSeries = this.state.series.concat({letter: newLetter, pos: newPos});\n        const newAnswers = this.state.answers.concat({letter: this.state.letterMatch, pos: this.state.positionMatch});\n\n        this.setState({series: newSeries, questionNo: this.state.questionNo + 1, positionMatch: false, letterMatch: false, answers: newAnswers});\n    }\n\n    handleStopRound = () => {\n        clearInterval(this.state.progressInterval);\n        this.setState({screen: 'stats', progressInterval: null, progress: 0});\n    }\n\n    renderBoard() {\n        return(\n            <div className=\"board\">\n                { \n                    [...Array(9)].map((cell, index) => {\n                        const shouldShow = index === this.state.series.slice(-1)[0].pos; \n                        const letterClasses = 'displayLetter' + (shouldShow ? ' show' : '');\n                        const letterStyle = {opacity: shouldShow ? '1' : '0'};\n                        return (\n                            <div className=\"cell\" key={index}>\n                                <span className={letterClasses} style={letterStyle}>\n                                    { this.state.series.slice(-1)[0].letter }\n                                </span>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n\n    renderStartScreen() {\n        return (\n            <div className=\"homeScreen\">\n                <div className=\"startBtn\" onClick={this.handleStartBtn}>Start</div>\n            </div>\n        );\n    }\n\n    renderTestScreen() {\n        const letterMatchClasses = 'matchBtn' + (this.state.letterMatch ? ' active' : '');\n        const positionMatchClasses = 'matchBtn' + (this.state.positionMatch ? ' active' : '');\n        return (\n            <div className=\"testScreen\">\n                <div className=\"counter\">\n                    <div className=\"title\">Dual 2 Back</div>\n                    <button className=\"cancelBtn\" onClick={this.handleCancelBtn}>Cancel</button>\n                </div>\n                { this.renderBoard() }\n                <div className=\"btnRow\">\n                    <div className={letterMatchClasses} onTouchStart={this.handleLetterMatchBtn} onClick={this.handleLetterMatchBtn}>Letter match</div>\n                    <div className={positionMatchClasses} onTouchStart={this.handlePositionMatchBtn} onClick={this.handlePositionMatchBtn}>Position match</div>\n                </div>\n                <div className=\"progressBarHolder\">\n                    <div className={\"progress\" + (this.state.progress < 1 && this.state.progress > 0 ? \" loading\" : \"\")} style={{width: 'calc((84vw + 24px) * ' + this.state.progress + ')'}}></div>\n                </div>\n                <div className=\"pager\"> {this.state.questionNo + '/' + this.testLength} </div>\n            </div>\n        );\n    }\n\n    renderStatsScreen() {\n        return (\n            <div className=\"statsScreen\">\n                <h1>Series:</h1>\n                <div>{ JSON.stringify(this.state.series) }</div>\n                <h1>Answers:</h1>\n                <div>{ JSON.stringify(this.state.answers) }</div>\n            </div>\n        );\n    }\n\n    renderScreen() {\n        if (this.state.screen === 'test') {\n            return this.renderTestScreen();\n        } else if (this.state.screen === 'stats') {\n            return this.renderStatsScreen();\n        }\n        return this.renderStartScreen();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                { this.renderScreen() }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}