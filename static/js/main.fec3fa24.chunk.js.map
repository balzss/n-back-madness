{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleCancelBtn","handleStopRound","handleStartTouchStart","e","target","classList","add","handleStartBtn","remove","startLetter","String","fromCharCode","Math","floor","random","startPos","setState","screen","questionNo","series","letter","pos","answers","scores","progressInterval","setInterval","handleRoundChange","singleQuestionTime","progress","Line","duration","color","animate","handleLetterMatchBtn","letterMatch","state","handlePositionMatchBtn","positionMatch","handleItemTouchStart","handleIncreaseNBack","nBack","min","testLength","handleDecreaseNBack","max","set","newScore","calculateScore","newScores","concat","newLetter","newPos","newSeries","newAnswers","clearInterval","handleItemTouchEnd","handleMenuClick","match","prevState","slice","this","currState","className","Array","map","cell","index","shouldShow","letterClasses","key","decreaseClasses","increaseClasses","round","onTouchStart","onTouchEnd","letterMatchClasses","getMatchBtnClasses","positionMatchClasses","onClick","renderBoard","posScores","reduce","acc","curr","letterScores","combinedScores","renderTestScreen","renderStatsScreen","renderStartScreen","renderScreen","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fec3fa24.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from 'progressbar.js';\n\nimport './App.scss';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            screen: 'start',\n            series: [{letter: '#', pos: 4}],\n            answers: [],\n            scores: [],\n            progressInterval: null,\n            questionNo: 1,\n            positionMatch: false,\n            letterMatch: false,\n            nBack: 1\n        };\n\n        this.testLength = 21;\n        this.singleQuestionTime = 3000;\n    }\n\n    getMatchBtnClasses(questionNo, nBack, match) {\n        const initialRounds = questionNo <= nBack;\n        return 'matchBtn' + (initialRounds ? ' disabled' : (match ? ' active' : ''));\n    }\n\n    handleCancelBtn = () => {\n        this.handleStopRound();\n    }\n\n    handleStartTouchStart = e => {\n        e.target.classList.add('active');\n    }\n\n    handleStartBtn = e => {\n        e.target.classList.remove('active');\n        const progressIntervalFn = () => {\n            this.handleRoundChange();\n        };\n\n        const startLetter = String.fromCharCode(65 + Math.floor(Math.random() * 25));\n        const startPos = Math.floor(Math.random() * 9);\n\n        this.setState({screen: 'test', questionNo: 1, series: [{letter: startLetter, pos: startPos}], answers: [], scores: [], progressInterval: setInterval(progressIntervalFn, this.singleQuestionTime)}, () => {\n            this.progress = new Line('.progressBar', {\n                duration: this.singleQuestionTime,\n                color: '#2545a8'\n            });\n            this.progress.animate(1);\n        });\n    }\n\n    handleLetterMatchBtn = e => {\n        this.setState({letterMatch: !this.state.letterMatch});\n    }\n\n    handlePositionMatchBtn = e => {\n        this.setState({positionMatch: !this.state.positionMatch});\n    }\n\n    handleItemTouchStart = e => {\n        e.target.classList.add('active');\n    }\n\n    handleIncreaseNBack = e => {\n        e.target.classList.remove('active');\n        this.setState({nBack: Math.min(Math.floor(this.testLength / 2), this.state.nBack + 1)});\n    }\n\n    handleDecreaseNBack = e => {\n        e.target.classList.remove('active');\n        this.setState({nBack: Math.max(1, this.state.nBack - 1)});\n    }\n\n    calculateScore(series, positionMatch, letterMatch) {\n        const prevState = series.slice(-1 - this.state.nBack)[0];\n        const currState = series.slice(-1)[0];\n        const posSame = prevState.pos === currState.pos;\n        const posScore = positionMatch === posSame;\n        const letterSame = prevState.letter === currState.letter;\n        const letterScore = letterMatch === letterSame;\n        return {pos: posScore, letter: letterScore};\n    }\n\n    handleRoundChange = () => {\n        if (this.state.questionNo >= this.testLength) {\n            this.handleStopRound();\n            return;\n        }\n\n        this.progress.set(0);\n        this.progress.animate(1);\n\n        const newScore = this.state.questionNo <= this.state.nBack\n            ? {}\n            : this.calculateScore(this.state.series, this.state.positionMatch, this.state.letterMatch);\n        const newScores = this.state.scores.concat(newScore);\n\n        const newLetter = String.fromCharCode(65 + Math.floor(Math.random() * 25));\n        const newPos = Math.floor(Math.random() * 9);\n\n        const newSeries = this.state.series.concat({letter: newLetter, pos: newPos});\n        const newAnswers = this.state.answers.concat({letter: this.state.letterMatch, pos: this.state.positionMatch});\n\n        this.setState({series: newSeries, questionNo: this.state.questionNo + 1, positionMatch: false, letterMatch: false, answers: newAnswers, scores: newScores});\n    }\n\n    handleStopRound = () => {\n        const newScore = this.calculateScore(this.state.series, this.state.positionMatch, this.state.letterMatch);\n\n        const newScores = this.state.scores.concat(newScore);\n\n        clearInterval(this.state.progressInterval);\n        this.setState({screen: 'stats', progressInterval: null, scores: newScores});\n    }\n\n    handleItemTouchStart = e => {\n        e.target.classList.add('active');\n    }\n\n    handleItemTouchEnd = e => {\n        e.target.classList.remove('active');\n    }\n\n    handleMenuClick = e => {\n        this.setState({screen: 'start'});\n    }\n\n    renderBoard() {\n        return(\n            <div className=\"board\">\n                { \n                    [...Array(9)].map((cell, index) => {\n                        const shouldShow = index === this.state.series.slice(-1)[0].pos; \n                        const letterClasses = 'displayLetter' + (shouldShow ? ' show' : '');\n                        return (\n                            <div className={'cell' + (shouldShow ? ' active' : '')} key={index}>\n                                <span className={letterClasses}>\n                                    { this.state.series.slice(-1)[0].letter }\n                                </span>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n\n    renderStartScreen() {\n        const decreaseClasses = 'menuItem' + (this.state.nBack === 1 ? ' disabled' : '');\n        const increaseClasses = 'menuItem' + (this.state.nBack >= Math.round(this.testLength / 2) ? ' disabled' : '');\n        return (\n            <div className=\"homeScreen\">\n                <div className=\"header\">\n                    <h1>Dual N-Back</h1>\n                </div>\n                <div className=\"menuItems\">\n                    <div className=\"menuItem\">How to play</div>\n                    <div className=\"menuItem\">Options</div>\n                    <div className=\"menuItem\">Statistics</div>\n                    <div className=\"modeSelector\">\n                        <div className={decreaseClasses} onTouchStart={this.handleItemTouchStart} onTouchEnd={this.handleDecreaseNBack}><i className=\"fas fa-caret-left\"></i></div>\n                        <div className=\"menuItem\">{ this.state.nBack } Back</div>\n                        <div className={increaseClasses} onTouchStart={this.handleItemTouchStart} onTouchEnd={this.handleIncreaseNBack}><i className=\"fas fa-caret-right\"></i></div>\n                    </div>\n                    <div className=\"startBtn\" onTouchStart={this.handleStartTouchStart} onTouchEnd={this.handleStartBtn}>Start</div>\n                </div>\n            </div>\n        );\n    }\n\n    renderTestScreen() {\n        const letterMatchClasses = this.getMatchBtnClasses(this.state.questionNo, this.state.nBack, this.state.letterMatch);\n        const positionMatchClasses = this.getMatchBtnClasses(this.state.questionNo, this.state.nBack, this.state.positionMatch);\n        return (\n            <div className=\"gameScreen\">\n                <div className=\"gameHeader\">\n                    <div className=\"title\">Dual {this.state.nBack} Back</div>\n                    <button className=\"cancelBtn\" onClick={this.handleCancelBtn}>Cancel</button>\n                </div>\n                <div className=\"boardContainer\">\n                    { this.renderBoard() }\n                </div>\n                <div className=\"progressBarHolder\">\n                    <div className=\"progressBar\"></div>\n                </div>\n                <div className=\"btnRow\">\n                    <div className={letterMatchClasses} onTouchStart={this.handleLetterMatchBtn}>Letter match</div>\n                    <div className={positionMatchClasses} onTouchStart={this.handlePositionMatchBtn}>Position match</div>\n                </div>\n                <div className=\"pager\"> <span className=\"number\">{this.state.questionNo}</span> <span className=\"separator\">/</span> <span className=\"number\">{this.testLength}</span> </div>\n            </div>\n        );\n    }\n\n    renderStatsScreen() {\n        const posScores = this.state.scores.reduce((acc, curr) => curr.pos ? acc + 1 : acc, 0);\n        const letterScores = this.state.scores.reduce((acc, curr) => curr.letter ? acc + 1 : acc, 0);\n        const combinedScores = this.state.scores.reduce((acc, curr) => curr.letter && curr.pos ? acc + 1 : acc, 0);\n        return (\n            <div className=\"statsScreen\">\n                <h2>Success rates:</h2>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>Position matched</th>\n                            <td>{Math.round((posScores / (this.testLength - 1)) * 100)}%</td>\n                        </tr>\n                        <tr>\n                            <th>Letter matched</th>\n                            <td>{Math.round((letterScores / (this.testLength - 1)) * 100)}%</td>\n                        </tr>\n                        <tr>\n                            <th>Both matched</th>\n                            <td>{Math.round((combinedScores / (this.testLength - 1)) * 100)}%</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div className=\"backHomeBtn\" onClick={this.handleMenuClick}>Main menu</div>\n                <div className=\"retryBtn\" onClick={this.handleStartBtn}>Retry</div>\n            </div>\n        );\n    }\n\n    renderScreen() {\n        if (this.state.screen === 'test') {\n            return this.renderTestScreen();\n        } else if (this.state.screen === 'stats') {\n            return this.renderStatsScreen();\n        }\n        return this.renderStartScreen();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                { this.renderScreen() }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}